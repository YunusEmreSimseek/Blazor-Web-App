@page "/change-password"
@using Microsoft.Extensions.Localization
@inject UserService UserService
@inject UserSessionManager UserSessionManager
@inject NavigationManager NavigationManager
@inject IStringLocalizer<BlazorApp1.Resources.SharedResource> L
@rendermode InteractiveServer

<h1>@L["changePassword"]</h1>

    <EditForm Model="@model" OnSubmit="HandleChangePassword" FormName="TestFormname">

        <div class="mb-3">
            <label>@L["currentPassword"]</label>
            <InputText @bind-Value="model.OldPassword" type="password" class="form-control" />
        </div>

        <div class="mb-3">
            <label>@L["newPassword"]</label>
            <InputText @bind-Value="model.NewPassword" type="password" class="form-control" />
        </div>

        <div class="mb-3">
            <label>@L["newPasswordAgain"]</label>
            <InputText @bind-Value="model.ConfirmNewPassword" type="password" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Captcha: <strong>@captchaText</strong></label>
            <InputText @bind-Value="model.Captcha" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">@L["changePassword"]</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-danger mt-3">@message</div>
    }
@if (!string.IsNullOrEmpty(confirmMessage))
{
    <div class="alert alert-info mt-3">@confirmMessage</div>
}


@code {
    private ChangePasswordModel model = new();
    private string captchaText = "";
    private string message = "";
    private string confirmMessage = "";

    protected override void OnInitialized()
    {
        if (!UserSessionManager.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        captchaText = GenerateCaptcha();
    }

    private string GenerateCaptcha()
    {
        var chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
        var rand = new Random();
        return new string(Enumerable.Range(0, 5).Select(_ => chars[rand.Next(chars.Length)]).ToArray());
    }

    private async Task HandleChangePassword()
    {
        var response = IsValid();
        if (!response) return;

        var username =  UserSessionManager.Username;
        if (string.IsNullOrEmpty(username)) return;
        var result = await UserService.ChangePasswordAsync(username, model.OldPassword, model.NewPassword);

        if (result)
        {
            message = L["passwordChangeSuccess"];
            model = new();

        }
        else
        {
            message = L["currentPasswordWrong"];
        }

        captchaText = GenerateCaptcha();
    }

    private bool IsValid()
    {
        if (model.Captcha?.ToUpper() != captchaText.ToUpper())
        {
            message = L["captchaFailed"];
            captchaText = GenerateCaptcha();
            return false;
        }
        if (string.IsNullOrEmpty(model.OldPassword))
        {
            message = L["currentPasswordRequired"];
            return false;
        }
        if (model.OldPassword.Length < 6)
        {
            message = L["currentPasswordLength"];
            return false;
        }
        if (string.IsNullOrEmpty(model.NewPassword))
        {
            message = L["newPasswordRequired"];
            return false;
        }
        if (model.NewPassword.Length < 6)
        {
            message = L["newPasswordLength"];
            return false;
        }
        if (string.IsNullOrEmpty(model.ConfirmNewPassword))
        {
            message = L["confirmNewPasswordRequired"];
            return false;
        }
        if (model.NewPassword != model.ConfirmNewPassword)
        {
            message = L["newPasswordsDontMatch"];
            return false;
        }
        if (model.OldPassword == model.NewPassword)
        {
            message = L["passwordsMustBeDifferent"];
            return false;
            
        }

        return true;
    }

    public class ChangePasswordModel
    {
        public string OldPassword { get; set; }

        public string NewPassword { get; set; }

        public string ConfirmNewPassword { get; set; }

        public string Captcha { get; set; }
    }
}
