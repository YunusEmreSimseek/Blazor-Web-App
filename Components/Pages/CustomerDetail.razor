@page "/customer-detail/{customerId}"
@using BlazorApp1.Data
@using BlazorApp1.Models
@using Microsoft.Extensions.Localization

@rendermode InteractiveServer

@inject IStringLocalizer<BlazorApp1.Resources.SharedResource> L
@inject UserSessionManager UserSessionManager
@inject NavigationManager Nav
@inject AppDbContext _context
@inject CustomerService _customerService
@inject OrderService _orderService
@inject ProductService _productService

<PageTitle>@L["customerDetail"]</PageTitle>

<h1>@L["customerDetail"]</h1>

@if (_isLoading)
{

    <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">@L["loading"]...</span>
        </div>
    </div>

}
else {
    <ConfirmDialog Visible="@_visible" Message="@_message" OnClose="HandleConfirm" />

    <span class="mb-3">
        <h3>@L["editCustomer"]</h3>

        <div class="mb-3">
            <input class="form-control" placeholder=@L["firstName"] @bind="_editingCustomer.First_Name" />
            <input class="form-control" placeholder=@L["lastName"] @bind="_editingCustomer.Last_Name" />
            <input class="form-control" placeholder=@L["company"] @bind="_editingCustomer.Company" />
            <input class="form-control" placeholder=@L["city"] @bind="_editingCustomer.City" />
            <input class="form-control" placeholder=@L["country"] @bind="_editingCustomer.Country" />
            <input class="form-control" placeholder="@L["phone"] 1" @bind="_editingCustomer.Phone_1" />
            <input class="form-control" placeholder="@L["phone"] 2" @bind="_editingCustomer.Phone_2" />
            <input class="form-control" placeholder=@L["email"] @bind="_editingCustomer.Email" />
            <input class="form-control" placeholder=@L["website"] @bind="_editingCustomer.Website" />
            <input class="form-control" type="date" @bind="_editingCustomer.Subscription_Date" />
        </div>

        <button class="btn btn-success" @onclick="SaveCustomer">@L["update"]</button>
        <button class="btn btn-secondary ms-2" @onclick="ClearForm">@L["cancel"]</button>
    </span>


    <table class="table">
    <thead>
        <tr>
            <th>@L["id"]</th>
            <th>@L["product"]</th>
            <th>@L["price"]</th>
            <th>@L["quantity"]</th>
            <th>@L["totalPrice"]</th>
            <th>@L["orderDate"]</th>
            <th>@L["deliveredDate"]</th>
            <th>@L["actions"]</th>
            
        </tr>
    </thead>
    <tbody>
        @foreach (var order in _orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.Product?.Name</td>
                <td>@order.Product?.Price</td>
                <td>@order.Quantity</td>
                <td>@order.TotalPrice</td>
                <td>@order.OrderDate</td>
                <td>@order.DeliveredDate</td>
                <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditOrder(order)">@L["edit"]</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(order.Id)">@L["delete"]</button> 
                </td>
            </tr>
        }
    </tbody>
</table>


    <div class="w-25">
        <h3>@(_isOrderEditing ? L["editOrder"] : L["createOrder"])</h3>

        <div class="mb-3">
        <div class="input-group">
            <input class="form-control" @bind="SearchTerm" @bind:event="oninput"  placeholder=@L["product"] readonly="@_isProductReadOnly" />
            <span class="input-group-text">
                @if (_editingProduct.Id > 0)
                {
                    <span class="text-success">✔️</span>
                }
                else
                {
                    <span class="text-danger">❌</span>
                }
            </span>
        </div>
            @if (_showSuggestions && _filteredProducts.Any())
            {
                    <ul class="list-group mt-1">
                    @foreach (var product in _filteredProducts)
                    {
                        <li class="list-group-item list-group-item-action"
                            style="cursor: pointer"
                            @onclick="() => SelectProduct(product)">
                            @product.Name
                        </li>
                    }
                </ul>
                
            }
            <input class="form-control" placeholder=@L["price"] @bind="_editingProduct.Price" readonly />
            <input class="form-control" placeholder=@L["quantity"] @bind="_editingOrder.Quantity" />
            <input class="form-control" type="datetime-local" placeholder="@L["orderDate"] 1" @bind="_editingOrder.OrderDate" />
            <input class="form-control" type="datetime-local" placeholder="@L["deliveredDate"] 2" @bind="_editingOrder.DeliveredDate" />
        </div>

        <button class="btn btn-success" @onclick="SaveOrder">@(_isOrderEditing ? L["update"] : L["create"])</button>
        <button class="btn btn-secondary ms-2" @onclick="ClearOrder">@L["cancel"]</button>
    </div>
}


@code {

    [Parameter] public string? customerId { get; set; }
    private Customer _customer = new Customer();
    private Customer _editingCustomer = new Customer();
    private List<Order> _orders = new List<Order>();
    private List<Product> _products = new List<Product>();
    private List<Product> _filteredProducts => string.IsNullOrWhiteSpace(SearchTerm)
        ? new List<Product>()
        : _products.Where(p => p.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private Order _editingOrder = new Order();
    private Product _editingProduct = new Product();
    private bool _isLoading = false;
    private bool _isOrderEditing = false;
    private bool _showSuggestions = false;
    private bool _visible = false;
    private bool _isProductReadOnly = false;
    private string _message = "";
    private string _searchTerm = "";
    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            _showSuggestions = true; // kullanıcı yazdıkça liste açılsın
        }
    }
    private TaskCompletionSource<bool>? _tcs;

    private void SelectProduct(Product product)
    {
        SearchTerm = product.Name;
        _editingProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Price = product.Price,
            CreatedAt = product.CreatedAt,
        };
        _editingOrder.ProductId = product.Id;
        _filteredProducts.Clear();
        _showSuggestions = false;
        _isProductReadOnly = true; 
    }

    private async Task ConfirmDelete(int orderId)
    {
        _message = "Are you sure to you want to delete this order ?";
        _visible = true;
        _tcs = new TaskCompletionSource<bool>();
        var result = await _tcs.Task;

        if (result)
        {
            _isLoading = true;
            await DeleteOrder(orderId);
            await GetCustomerOrders();
            _isLoading = false;
        }
    }

    private Task HandleConfirm(bool result)
    {
        _visible = false;
        _message = "";
        _tcs?.SetResult(result);
        StateHasChanged(); 
        return Task.CompletedTask;
    }

    private async Task GetCustomerDetail()
    {
        if (string.IsNullOrEmpty(customerId)) return;
        _isLoading = true;
        var customer = await _customerService.GetCustomerByIdAsync(customerId);
        if (customer != null)
        {
            _customer = new Customer
            {
                Index = customer.Index,
                Customer_Id = customer.Customer_Id,
                First_Name = customer.First_Name,
                Last_Name = customer.Last_Name,
                Company = customer.Company,
                City = customer.City,
                Country = customer.Country,
                Phone_1 = customer.Phone_1,
                Phone_2 = customer.Phone_2,
                Email = customer.Email,
                Website = customer.Website,
                Subscription_Date = customer.Subscription_Date
            };
        _editingCustomer = new Customer
            {
                Index = customer.Index,
                Customer_Id = _customer.Customer_Id,
                First_Name = _customer.First_Name,
                Last_Name = _customer.Last_Name,
                Company = _customer.Company,
                City = _customer.City,
                Country = _customer.Country,
                Phone_1 = _customer.Phone_1,
                Phone_2 = _customer.Phone_2,
                Email = _customer.Email,
                Website = _customer.Website,
                Subscription_Date = _customer.Subscription_Date
            };
        }
        _isLoading = false;
    }

    private async Task GetCustomerOrders()
    {
        if (string.IsNullOrEmpty(customerId)) return;
        _isLoading = true;
        var orders = await _orderService.GetOrdersByCustomerIdAsync(customerId);
        _orders = orders ?? new List<Order>();
        _isLoading = false;
    }
    
    protected override void  OnInitialized(){
        if (!(UserSessionManager.Role == Role.Director || UserSessionManager.Role == Role.Admin)){
             Nav.NavigateTo("/");
             return;
        }
    }
    protected override async Task  OnInitializedAsync(){
        await GetCustomerDetail();
        await GetCustomerOrders();
        await LoadProducts();
    }

    private async Task SaveCustomer()
    {
        if (_editingCustomer == _customer) return;
            _isLoading = true;
            await _customerService.UpdateCustomerAsync(_editingCustomer);
            await GetCustomerDetail();
            _isLoading = false;
        
    }

    private void ClearForm(){
        _editingCustomer = new Customer{
            Customer_Id = _customer.Customer_Id,
            First_Name = _customer.First_Name,
            Last_Name = _customer.Last_Name,
            Company = _customer.Company,
            City = _customer.City,
            Country = _customer.Country,
            Phone_1 = _customer.Phone_1,
            Phone_2 = _customer.Phone_2,
            Email = _customer.Email,
            Website = _customer.Website,
            Subscription_Date = _customer.Subscription_Date
        };
    }

    private async Task SaveOrder(){
        if (_editingProduct.Id == 0 || _editingOrder.Quantity is null || _editingOrder.OrderDate is null || _editingOrder.DeliveredDate is null) return;
        _isLoading = true;
        if (_isOrderEditing)
        {
            _editingOrder.TotalPrice = _editingProduct.Price * _editingOrder.Quantity;
            await _orderService.UpdateOrderAsync(_editingOrder);
            ClearOrder();
            await GetCustomerOrders();
        }
        else
        {
            _editingOrder.CustomerId = _customer.Customer_Id;
            _editingOrder.ProductId = _editingProduct.Id;
            _editingOrder.TotalPrice = _editingProduct.Price * _editingOrder.Quantity;
            await _orderService.AddOrderAsync(_editingOrder);
            ClearOrder();
            await GetCustomerOrders();
        }
        _isLoading = false;
    }

    private void ClearOrder(){
        _editingOrder = new Order();
        _editingProduct = new Product();
        _searchTerm = "";
        _showSuggestions = false;
        _isProductReadOnly = false;
        _isOrderEditing = false;
    }

    private void EditOrder(Order order){
        _editingOrder = new Order
        {
            Id = order.Id,
            ProductId = order.ProductId,
            Quantity = order.Quantity,
            TotalPrice = order.TotalPrice,
            OrderDate = order.OrderDate,
            DeliveredDate = order.DeliveredDate,
            CustomerId = order.CustomerId
        };
        _editingProduct = new Product
        {
            Id = order.Product?.Id ?? 0,
            Name = order.Product?.Name ?? "",
            Price = order.Product?.Price ?? 0,
            CreatedAt = order.Product?.CreatedAt ?? DateTime.Now
        };
        SearchTerm = _editingProduct.Name;
        _showSuggestions = false;
        _isOrderEditing = true;
    }

    private async Task DeleteOrder(int id){
        _isLoading = true;
        await _orderService.DeleteOrderAsync(id);
        _isLoading = false;
        _orders.RemoveAll(o => o.Id == id);
        ClearOrder();
    }

    private async Task LoadProducts() 
    {
        _products = await _productService.GetAllProductsAsync();
    }



}


